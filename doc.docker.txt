doc Dockerfile: https://docs.docker.com/reference/dockerfile/

PORT:
3070: docker    (có thể custom)
3069: local     (có thể custom)
3307: database  (có thể custom)
3306: mysql

## IMAGE

# Buid image
        docker image build -t <ten_image_tu_dat>:latest .
Ví dụ:  docker image build -t thanhhienngo/img-be_cyber_community:latest .

# Show tất cả image đang có
    docker image list
    docker image ls

# Xóa image
    docker image remove id_ten_image
    docker image rmi id_ten_image


# Công cụ phân tích image dive (phải cài với quyền admin- chỉ cần cài 1 lần global)
| brew install dive       # macOS
| sudo apt install dive   # Linux
| choco install dive      # Windows

| dive --version
| dive <your-image-tag>  (dive img-be_cyber_community)

## CONTAINER
# show tất cả container
    docker container list (show những container đang online)
    docker container ls
    docker ps
    -a (show tất cả các container kể cả container đang offline)
        docker container list -a
        docker container ls -a
        docker ps -a

# Tạo container
    docker container run --env-file .env --name con-be_cyber_community -p 3070:3069 -d img-be_cyber_community
    --env-file: đọc dữ liệu bên trong file env và nạp vào biến môi trường của docker
    --name: đặt cho container
    -p: quy định cổng mà FE sẽ kết nối
    -d: chạy ngầm, không chiếm dụng terminal
    TÊN IMAGE LUÔN ĐỂ CUỐI CÙNG
    kiểm tra xem image đã có trong máy hay chưa
        - có: ưu tiên dùng trong máy 
        - chưa: tự lên docker hub tìm và tải về

# Kiểm tra log container (source)
    docker logs id_ten_image
    docker logs -f id_ten_image
        -f: bắt dính cập nhật log mới nhất (chỉ khi container start)

# Chạy container
    docker container start id_ten_container

# Xóa container
    docker container remove id_ten_container
    docker container rm id_ten_container

## Docker Compose
    start
        docker compose up -d
    stop
        docker compose down

# Kết hợp
    docker image remove img-be_cyber_community && docker image build -t img-be_cyber_community .

    docker container remove con-be_cyber_community && docker container run --env-file .env --name con-be_cyber_community -p 3070:3069 -d img-be_cyber_community


## Kết nối giữa 2 container với nhau
    node-51-mysql == con-be_cyber_community
Cách 1:
| 1. Click vào container của node-51-mysql ở docker 
| 2. Ở giao diện detail của node-51-mysql chọn mục Inspect
| 3. Sau đó chọn phần Networks
| 4. Tìm tới "IPAddress": "172.17.0.2",
| 5. Copy 172.17.0.2 và dán và đè vào localhost của DATABASE_URL ở file .env
| 6. Ở file .env Đổi port thành 3306 của mysql
|    DATABASE_URL=mysql://root:1234@172.17.0.2:3306/db_cyber_community 
| 7. Chạy lệnh: docker container remove con-be_cyber_community && docker container run --env-file .env --name con-be_cyber_community -p 3070:3069 -d img-be_cyber_community

Cách 2:
| 1. Tạo file: docker-compose.yml
| 2. Chạy lệnh: docker compose up -d
| 3. Ở file .env: DATABASE_URL=mysql://root:1234@con-db_cyber_community:3306/db_cyber_community

=> Vào trang Swagger: http://localhost:3070/api-docs   # không cần chạy npm run start:dev


## Đưa lên DockerHub
| 1. docker login     
| 2. docker push <ten_image>:latest
|    docker push thanhhienngo/img-be_cyber_community:latest


## CI/CD
# CI
| 1. Tạo folder .github/
|                   workflows/
|                       ci.yml
| 2. Lên trang Account settings của DockerHub
|  - Vào Personal access token 
|  - Chọn Generate new token       
|       Access token description: <đặt tên>
|       Access permission: Read, Write, Delete  
|  - Chọn Generate 
| 3. Copy vùng Run 
|       docker login -u thanhhienngo
| 4. Paste vào ci.yml
|       run: docker login -u thanhhienngo      
| 5. Copy vùng At the password prompt, enter the personal access token.
| 6. Vào repository GitHub của dự án 
| 7. Vào Settings
| 8. Chọn Secrets and variables/Actions
| 9. Chọn New responsitory secret ở phần Repository secrets
| 10. Điền form
|        Name: <đặt_tên>
|        secret: <paster_từ_dockerhub>
| 11. Chọn Add secret
| 12. Vào ci.yml và thêm ${{secrets.DOCKER_PASS}} vào run: docker login -u thanhhienngo 
|       run: docker login -u thanhhienngo -p ${{secrets.DOCKER_PASS}}
| 13. Xem ở Actions trong Github

# CD
| 1. Tạo folder .github/
|                   workflows/
|                       cd.yml
============= AWS ============ 
| 2. Vào trang console.aws.com
| 3. Search: EC2 
| 4. Chọn Launch instance
| 5. Chuyển sever sang Singapore
| 6. Điền form
|       Name: <đặt_tên>
|       Quick Start: Ubuntu
|       Instance type: t3.small
|       Key pair (login) -> Create new key pair (Nếu đã tạo trước đó thì không cần Create nữa)
|           Key pair name: <đặt tên>
|           Còn lại để mặc định và bấm [Create key pair]  (sẽ có file .pem được download về)
| 7. Chọn Launch instance
| 8. Trở về Instances 
| 9. Click vào Instance ID vừa mới tạo
| 10. Bấm vào nút Connect 
| 11. Chọn SSH client
| 12. Ở máy tính đến folder <AWS> có chứa file .pem lúc [Create key pair] 
| 13. Nhấn chuột phải vào folder <AWS> chọn Mở trong Bảng điều khiển
| 14. Copy dòng ssh -i ... ở Example và paste vào terminal
| 15. Nhập lệnh Ubuntu vào terminal
|       ls -la
|       mkdir home
|       ls -la
|       cd home/
(Copy code từ https://docs.docker.com/)
for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done

# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update   

# Kiểm tra
sudo systemctl status docker

| 16. Vào repository GitHub của dự án 
| 17. Chọn Settings
| 18. Vào Actions/Runners
| 19. Tại Runner image: Chọn Linux
| 20. Copy và Paste tất cả câu lệnh ở phần Download vào Terminal
|       mkdir actions-runner && cd actions-runner
|       mkdir be-cyber_community && cd be-cyber_community  (thêm dòng này)
| 21. Copy và Paste câu lệnh đầu tiên ở Configure vào Terminal
|       - Đến phần: Enter any additional labels (ex. label-1,label-2): [press Enter to skip] 
|       - Nhập tên backend: be-cyber_community
|       Enter any additional labels (ex. label-1,label-2): [press Enter to skip] be-cyber_community
| 22. Copy và Paste 2 câu lệnh này vào Terminal
|       sudo ./svc.sh install
|       sudo ./svc.sh start
| 23. Quay lại Actions/Runners ở GitHub và F5 lại  (nếu thấy hoàn toàn chấm xanh là thành công)
| Như vậy GitHub và Server AWS đã kết nối được với nhau
| 24. Tiếp tục viết lệnh cho cd.yml

Connect lại khi bị Disconnect
ssh lại (copy trên aws)
cd home/
cd actions-runner
cd be-cyber_community

# Lệnh Ubuntu hay dùng
    ls -la: show tất cả folder
    rmdir -rf: xóa folder
    touch: tạo file
    rm: xóa file
    cd: di chuyển tới foler

    Chạy online runner 
    sudo ./svc.sh install
    sudo ./svc.sh start